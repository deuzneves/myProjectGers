{"ast":null,"code":"const express = require('express');\n\nconst mysql = require('mysql');\n\nvar cors = require('cors');\n\nconst app = express();\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'customer',\n  port: '3306'\n});\napp.use(cors());\napp.use(express.json());\napp.get(\"/api/get\", (req, res) => {\n  const email = req.body.email;\n  const password = req.body.password;\n  const sqlSelect = \"SELECT (email, password) FROM user\";\n  connection.query(sqlSelect, [email, password], (err, result) => {\n    res.send(result);\n  });\n});\napp.post(\"/api/insert\", (req, res) => {\n  const email = req.body.email;\n  const password = req.body.password;\n  const sqlSelect = \"SELECT * FROM user WHERE email = ?\";\n  connection.query(sqlSelect, [email], (err, rows) => {\n    if (err) {\n      connection.end();\n      console.log(err);\n    }\n\n    if (!email == rows) {\n      const sqlInsert = \"INSERT INTO user (email, password) VALUES (?,?)\";\n      connection.query(sqlInsert, [email, password], (err, result) => {\n        res.send(result);\n        console.log(\"User registered\");\n      });\n    } else {\n      console.log(\"User already exist\");\n    }\n  });\n});\n\nfunction useRows() {\n  rows();\n} // connection.connect((err) => {\n//     if(err) {\n//         throw err\n//     } else {\n//         console.log(\"connected\")\n//     }\n// })\n// connection.query('CREATE TABLE user(id INT(30) UNSIGNED AUTO_INCREMENT PRIMARY KEY, email VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL)', (err, rows) => {\n//     if (err){\n//         throw err\n//     } else {\n//         console.log(\"DATA SENT BOIS\")\n//         console.log(rows)\n//     }\n// })\n// connection.query(\"INSERT INTO user(email, password) VALUES ('abc', 'JOAO')\", (err, rows) =>{\n//     if (err){\n//                  throw err\n//              } else {\n//                  console.log(\"DATA SENT BOIS\")\n//                  console.log(rows)\n//     }\n// })\n\n\nconst port = process.env.PORT || 3001;\napp.listen(port);\nconsole.log(\"App is listening on port \" + port);","map":{"version":3,"sources":["C:/Users/Deuzito/Desktop/Volt JS/src/server.js"],"names":["express","require","mysql","cors","app","connection","createConnection","host","user","password","database","port","use","json","get","req","res","email","body","sqlSelect","query","err","result","send","post","rows","end","console","log","sqlInsert","useRows","process","env","PORT","listen"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAE,SAAF,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAE,OAAF,CAArB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;AAEA,IAAIK,UAAU,GAAGH,KAAK,CAACI,gBAAN,CAAuB;AACpCC,EAAAA,IAAI,EAAE,WAD8B;AAEpCC,EAAAA,IAAI,EAAE,MAF8B;AAGpCC,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,QAAQ,EAAE,UAJ0B;AAKpCC,EAAAA,IAAI,EAAE;AAL8B,CAAvB,CAAjB;AAQAP,GAAG,CAACQ,GAAJ,CAAQT,IAAI,EAAZ;AACAC,GAAG,CAACQ,GAAJ,CAAQZ,OAAO,CAACa,IAAR,EAAR;AAEAT,GAAG,CAACU,GAAJ,CAAQ,UAAR,EAAoB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAE9B,QAAMC,KAAK,GAAGF,GAAG,CAACG,IAAJ,CAASD,KAAvB;AACA,QAAMR,QAAQ,GAAGM,GAAG,CAACG,IAAJ,CAAST,QAA1B;AAEA,QAAMU,SAAS,GAAG,oCAAlB;AACAd,EAAAA,UAAU,CAACe,KAAX,CAAiBD,SAAjB,EAA4B,CAACF,KAAD,EAAQR,QAAR,CAA5B,EAA+C,CAACY,GAAD,EAAMC,MAAN,KAAiB;AAC7DN,IAAAA,GAAG,CAACO,IAAJ,CAASD,MAAT;AACF,GAFD;AAGH,CATD;AAWAlB,GAAG,CAACoB,IAAJ,CAAS,aAAT,EAAwB,CAACT,GAAD,EAAMC,GAAN,KAAa;AAEjC,QAAMC,KAAK,GAAGF,GAAG,CAACG,IAAJ,CAASD,KAAvB;AACA,QAAMR,QAAQ,GAAGM,GAAG,CAACG,IAAJ,CAAST,QAA1B;AAEA,QAAMU,SAAS,GAAG,oCAAlB;AACAd,EAAAA,UAAU,CAACe,KAAX,CAAiBD,SAAjB,EAA4B,CAACF,KAAD,CAA5B,EAAqC,CAACI,GAAD,EAAMI,IAAN,KAAc;AAC/C,QAAIJ,GAAJ,EAAS;AACLhB,MAAAA,UAAU,CAACqB,GAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACH;;AACD,QAAI,CAACJ,KAAD,IAAUQ,IAAd,EAAoB;AAChB,YAAMI,SAAS,GAAG,iDAAlB;AACAxB,MAAAA,UAAU,CAACe,KAAX,CAAiBS,SAAjB,EAA4B,CAACZ,KAAD,EAAQR,QAAR,CAA5B,EAA+C,CAACY,GAAD,EAAMC,MAAN,KAAgB;AAC3DN,QAAAA,GAAG,CAACO,IAAJ,CAASD,MAAT;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEP,OAJG;AAKP,KAPG,MAQC;AACDD,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;AACA,GAhBD;AAiBH,CAvBD;;AAyBA,SAASE,OAAT,GAAmB;AACfL,EAAAA,IAAI;AACP,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMd,IAAI,GAAGoB,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAqB,IAAlC;AACA7B,GAAG,CAAC8B,MAAJ,CAAWvB,IAAX;AAEAgB,OAAO,CAACC,GAAR,CAAY,8BAA8BjB,IAA1C","sourcesContent":["const express = require ('express');\r\nconst mysql = require ('mysql');\r\nvar cors = require('cors');\r\nconst app = express();\r\n\r\nvar connection = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'root',\r\n    password: '',\r\n    database: 'customer',\r\n    port: '3306',\r\n})\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\napp.get(\"/api/get\", (req, res) => {\r\n\r\n    const email = req.body.email\r\n    const password = req.body.password\r\n\r\n    const sqlSelect = \"SELECT (email, password) FROM user\";\r\n    connection.query(sqlSelect, [email, password], (err, result) => {\r\n       res.send(result);\r\n    });\r\n});\r\n\r\napp.post(\"/api/insert\", (req, res) =>{\r\n\r\n    const email = req.body.email\r\n    const password = req.body.password\r\n\r\n    const sqlSelect = \"SELECT * FROM user WHERE email = ?\";\r\n    connection.query(sqlSelect, [email], (err, rows) =>{\r\n        if (err) {\r\n            connection.end();\r\n            console.log(err);\r\n        }\r\n        if (!email == rows) {\r\n            const sqlInsert = \"INSERT INTO user (email, password) VALUES (?,?)\";\r\n            connection.query(sqlInsert, [email, password], (err, result) =>{\r\n                res.send(result);\r\n                console.log(\"User registered\")\r\n       \r\n        })\r\n    }\r\n    else {\r\n        console.log(\"User already exist\")\r\n    }   \r\n    });\r\n});\r\n\r\nfunction useRows() {\r\n    rows();\r\n}\r\n// connection.connect((err) => {\r\n//     if(err) {\r\n//         throw err\r\n//     } else {\r\n//         console.log(\"connected\")\r\n//     }\r\n// })\r\n\r\n// connection.query('CREATE TABLE user(id INT(30) UNSIGNED AUTO_INCREMENT PRIMARY KEY, email VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL)', (err, rows) => {\r\n//     if (err){\r\n//         throw err\r\n//     } else {\r\n//         console.log(\"DATA SENT BOIS\")\r\n//         console.log(rows)\r\n//     }\r\n// })\r\n\r\n// connection.query(\"INSERT INTO user(email, password) VALUES ('abc', 'JOAO')\", (err, rows) =>{\r\n//     if (err){\r\n//                  throw err\r\n//              } else {\r\n//                  console.log(\"DATA SENT BOIS\")\r\n//                  console.log(rows)\r\n//     }\r\n// })\r\n\r\nconst port = process.env.PORT  || 3001;\r\napp.listen(port);\r\n\r\nconsole.log(\"App is listening on port \" + port)"]},"metadata":{},"sourceType":"module"}